<%= form_with(model: image, local: true) do |form| %>
  <% if image.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(image.errors.count, "error") %> prohibited this image from being saved:</h2>

      <ul>
      <% image.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :name %>
    <%= form.text_field :name %>
  </div>

  <input id="snap_image" type="hidden" name="base64img">

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>


<!-- Stream video via webcam -->
<div class="video-wrap">
  <video id="video" playsinline autoplay></video>
</div>

<!-- Trigger canvas web API -->
<div class="controller">
  <button id="snap">Capture</button>
</div>

<!-- Webcam video snapshot -->
<canvas id="canvas" width="640" height="480"></canvas>

<script>
    'use strict';

    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const snap = document.getElementById("snap");
    const errorMsgElement = document.querySelector('span#errorMsg');
    const img = document.querySelector('#snap_image');

    const constraints = {
        audio: true,
        video: {
            width: 640, height: 480
        }
    };

    // Access webcam
    async function init() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            handleSuccess(stream);
        } catch (e) {
            errorMsgElement.innerHTML = `navigator.getUserMedia error:${e.toString()}`;
        }
    }

    // Success
    function handleSuccess(stream) {
        window.stream = stream;
        video.srcObject = stream;
    }

    // Load init
    init();

    // Draw image
    var context = canvas.getContext('2d');
    snap.addEventListener("click", function() {
        context.drawImage(video, 0, 0, 640, 480);
        img.value = canvas.toDataURL();
    });
</script>

